{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pettimart/Documents/GitHub/handbook/pages/index.js\";\nimport fs from 'fs';\nimport { default as router } from 'path';\nimport Head from 'next/head';\nimport Handbook from '../components/Handbook';\nimport matter from 'gray-matter';\n\nfunction Index({\n  languages\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Manas handbook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"viewport\",\n        content: \"initial-scale=1.0, width=device-width, user-scalable=no\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Handbook, {\n      languages: languages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport async function getStaticProps() {\n  const languages = {\n    en: getContents(router.join(process.cwd(), 'content/en')),\n    es: getContents(router.join(process.cwd(), 'content/es'))\n  };\n  return {\n    props: {\n      languages\n    }\n  };\n}\n\nfunction getContents(base, directory = '', level = 0, contents = []) {\n  const entries = fs.readdirSync(router.join(base, directory), {\n    withFileTypes: true\n  });\n  entries.forEach((entry, i) => {\n    const path = `${directory.length ? `${directory}/` : ''}${entry.name}`;\n\n    if (entry.isDirectory()) {\n      contents.push(...getContents(base, path, level + 1));\n    } else if (RegExp('^.*\\.md$').test(entry.name)) {\n      const file = matter(fs.readFileSync(router.join(base, path), 'utf8'));\n      contents.push({\n        level: level ? level + (i ? 1 : 0) : 1,\n        path,\n        data: file.data,\n        content: file.content\n      });\n    }\n  });\n  return contents;\n}\n\nexport default Index;","map":{"version":3,"sources":["/Users/pettimart/Documents/GitHub/handbook/pages/index.js"],"names":["fs","default","router","Head","Handbook","matter","Index","languages","getStaticProps","en","getContents","join","process","cwd","es","props","base","directory","level","contents","entries","readdirSync","withFileTypes","forEach","entry","i","path","length","name","isDirectory","push","RegExp","test","file","readFileSync","data","content"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,OAAO,IAAIC,MAApB,QAAiC,MAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAASC,KAAT,CAAe;AAACC,EAAAA;AAAD,CAAf,EAA4B;AAC1B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AASD;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMD,SAAS,GAAG;AAChBE,IAAAA,EAAE,EAAEC,WAAW,CAACR,MAAM,CAACS,IAAP,CAAYC,OAAO,CAACC,GAAR,EAAZ,EAA2B,YAA3B,CAAD,CADC;AAEhBC,IAAAA,EAAE,EAAEJ,WAAW,CAACR,MAAM,CAACS,IAAP,CAAYC,OAAO,CAACC,GAAR,EAAZ,EAA2B,YAA3B,CAAD;AAFC,GAAlB;AAIA,SAAO;AACLE,IAAAA,KAAK,EAAE;AACLR,MAAAA;AADK;AADF,GAAP;AAKD;;AAED,SAASG,WAAT,CAAqBM,IAArB,EAA2BC,SAAS,GAAG,EAAvC,EAA2CC,KAAK,GAAG,CAAnD,EAAsDC,QAAQ,GAAG,EAAjE,EAAqE;AACnE,QAAMC,OAAO,GAAGpB,EAAE,CAACqB,WAAH,CAAenB,MAAM,CAACS,IAAP,CAAYK,IAAZ,EAAkBC,SAAlB,CAAf,EAA6C;AAACK,IAAAA,aAAa,EAAE;AAAhB,GAA7C,CAAhB;AACAF,EAAAA,OAAO,CAACG,OAAR,CAAgB,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC5B,UAAMC,IAAI,GAAI,GAAET,SAAS,CAACU,MAAV,GAAmB,GAAEV,SAAU,GAA/B,GAAoC,EAAG,GAAEO,KAAK,CAACI,IAAK,EAApE;;AACA,QAAGJ,KAAK,CAACK,WAAN,EAAH,EAAwB;AACtBV,MAAAA,QAAQ,CAACW,IAAT,CAAc,GAAGpB,WAAW,CAACM,IAAD,EAAOU,IAAP,EAAaR,KAAK,GAAG,CAArB,CAA5B;AACD,KAFD,MAEO,IAAIa,MAAM,CAAC,UAAD,CAAN,CAAmBC,IAAnB,CAAwBR,KAAK,CAACI,IAA9B,CAAJ,EAAyC;AAC9C,YAAMK,IAAI,GAAG5B,MAAM,CAACL,EAAE,CAACkC,YAAH,CAAgBhC,MAAM,CAACS,IAAP,CAAYK,IAAZ,EAAkBU,IAAlB,CAAhB,EAAyC,MAAzC,CAAD,CAAnB;AACAP,MAAAA,QAAQ,CAACW,IAAT,CAAc;AACZZ,QAAAA,KAAK,EAAEA,KAAK,GAAEA,KAAK,IAAIO,CAAC,GAAE,CAAF,GAAM,CAAX,CAAP,GAAuB,CADvB;AAEZC,QAAAA,IAFY;AAGZS,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAHC;AAIZC,QAAAA,OAAO,EAAEH,IAAI,CAACG;AAJF,OAAd;AAMD;AACF,GAbD;AAcA,SAAOjB,QAAP;AACD;;AAED,eAAeb,KAAf","sourcesContent":["import fs from 'fs'\nimport { default as router} from 'path'\nimport Head from 'next/head'\nimport Handbook from '../components/Handbook'\nimport matter from 'gray-matter'\n\nfunction Index({languages}) {\n  return (\n    <>\n      <Head>\n        <title>Manas handbook</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width, user-scalable=no\" />\n      </Head>\n      <Handbook languages={languages}></Handbook>\n    </>\n  )\n}\n\nexport async function getStaticProps() {\n  const languages = {\n    en: getContents(router.join(process.cwd(), 'content/en')),\n    es: getContents(router.join(process.cwd(), 'content/es')),\n  }\n  return {\n    props: {\n      languages\n    }\n  }\n}\n\nfunction getContents(base, directory = '', level = 0, contents = []) {\n  const entries = fs.readdirSync(router.join(base, directory), {withFileTypes: true})\n  entries.forEach((entry, i) => {\n    const path = `${directory.length? `${directory}/` : ''}${entry.name}`\n    if(entry.isDirectory()) {\n      contents.push(...getContents(base, path, level + 1))\n    } else if (RegExp('^.*\\.md$').test(entry.name)) {\n      const file = matter(fs.readFileSync(router.join(base, path), 'utf8'))\n      contents.push({\n        level: level? level + (i? 1 : 0) : 1,\n        path,\n        data: file.data,\n        content: file.content\n      })\n    }\n  })\n  return contents\n}\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}